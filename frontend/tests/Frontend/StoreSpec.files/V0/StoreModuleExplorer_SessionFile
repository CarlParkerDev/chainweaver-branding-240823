";;\n;; \"Hello, world!\" smart contract/module\n;;\n;; To try it out, click \"Load into REPL\" and type into the repl:\n;; (hello-world.set-message \"universe\")\n;; (hello-world.greet)\n;;\n;; Check lines 21 and 34 to play with Formal Verification\n;;\n\n(namespace \"free\")\n\n;; Define the module.\n(module hello-world MODULE_ADMIN\n  \"A smart contract to greet the world.\"\n\n  ; no-op module admin for example purposes.\n  ; in a real contract this could enforce a keyset, or\n  ; tally votes, etc.\n  (defcap MODULE_ADMIN () true)\n\n  (defschema message-schema\n    @doc \"Message schema\"\n    @model [(invariant (!= msg \"\"))]\n\n    msg:string)\n\n  (deftable\n    message:{message-schema})\n\n  (defun set-message\n    (\n      m:string\n    )\n    \"Set the message that will be used next\"\n    ; uncomment the following to make the model happy!\n    ; (enforce (!= m \"\") \"set-message: must not be empty\")\n    (write message \"0\" {\"msg\": m})\n  )\n\n  (defun greet ()\n    \"Do the hello-world dance\"\n    (with-default-read message \"0\" { \"msg\": \"\" } { \"msg\":= msg }\n      (format \"Hello {}!\" [msg])))\n)\n\n(create-table message)\n\n(set-message \"world\")\n(greet)\n"